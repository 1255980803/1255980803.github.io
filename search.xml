<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo的基本使用</title>
      <link href="/archives/bd9d93a4.html"/>
      <url>/archives/bd9d93a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo命令的基本使用"><a href="#hexo命令的基本使用" class="headerlink" title="hexo命令的基本使用"></a>hexo命令的基本使用</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 命令用于 ** 初始化 ** 本地文件夹为博客的根目录。</span><br></pre></td></tr></table></figure><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><h4 id="hexo-new-命令用于-新建文章-，一般可以简写为-hexo-n"><a href="#hexo-new-命令用于-新建文章-，一般可以简写为-hexo-n" class="headerlink" title="hexo new 命令用于 新建文章 ，一般可以简写为 hexo n"></a>hexo new 命令用于 新建文章 ，一般可以简写为 hexo n</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [<span class="type">layout</span>] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>layout 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定<br>title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</p><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><h4 id="hexo-server-命令用于-启动本地服务器，一般可以简写为-hexo-s"><a href="#hexo-server-命令用于-启动本地服务器，一般可以简写为-hexo-s" class="headerlink" title="hexo server 命令用于 启动本地服务器，一般可以简写为 hexo s"></a>hexo server 命令用于 启动本地服务器，一般可以简写为 hexo s</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>-p 选项，指定服务器端口，默认为 4000<br>-i 选项，指定服务器 IP 地址，默认为 0.0.0.0<br>-s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</p><p><em>说明</em>： 运行本地服务器需要安装 hexo-server 插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-server</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><h4 id="hexo-clean-命令用于-清理缓存文件-。网站显示异常的时候可以尝试此操作"><a href="#hexo-clean-命令用于-清理缓存文件-。网站显示异常的时候可以尝试此操作" class="headerlink" title="hexo clean 命令用于 ** 清理缓存文件 **。网站显示异常的时候可以尝试此操作"></a>hexo clean 命令用于 ** 清理缓存文件 **。网站显示异常的时候可以尝试此操作</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><h4 id="hexo-generate-命令用于-生成静态文件，一般可以简写为-hexo-g"><a href="#hexo-generate-命令用于-生成静态文件，一般可以简写为-hexo-g" class="headerlink" title="hexo generate 命令用于 生成静态文件，一般可以简写为 hexo g"></a>hexo generate 命令用于 生成静态文件，一般可以简写为 hexo g</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><h5 id="hexo-deploy-命令用于-部署-网站，一般可以简写为-hexo-d"><a href="#hexo-deploy-命令用于-部署-网站，一般可以简写为-hexo-d" class="headerlink" title="hexo deploy 命令用于 ** 部署 ** 网站，一般可以简写为 hexo d"></a>hexo deploy 命令用于 ** 部署 ** 网站，一般可以简写为 hexo d</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><em>说明</em> ：部署前需要修改 _config.yml 配置文件，下面以 部署到 GitHub 为例进行说明</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/site/site.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM常用注解</title>
      <link href="/archives/d6b79b39.html"/>
      <url>/archives/d6b79b39.html</url>
      
        <content type="html"><![CDATA[<h3 id="SSM常用注解"><a href="#SSM常用注解" class="headerlink" title="SSM常用注解"></a>SSM常用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//设置为一个配置类，变为ioc容器，代替了xml文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zhu&quot;)</span> <span class="comment">//进行包扫描 加载对应的Bean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="comment">//加载配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MyBatisConfig.class&#125;)</span> <span class="comment">//导入第三方bean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//在需要进行事务控制的方法或者类上添加注解就可以实现事务控制。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启注解式事务驱动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//注册为bean &lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;/bean&gt; 注解通常是我们在标有该注解的⽅法中定义产⽣这个bean的逻辑。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//@Component（@Controller、@Service、@Repository）通常是通过类路径扫描来⾃动侦测以及⾃动装配到Spring容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//是使用Java 注解快捷配置Spring Webmvc的一个注解。在使用该注解后配置一个继承于WebMvcConfigurerAdapter的配置类即可配置好Spring Webmvc。</span></span><br><span class="line"><span class="comment">//开启由json数据转换为对象的功能</span></span><br><span class="line"><span class="comment">//根据类型匹配对应的类型转换器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span> <span class="comment">//设置当前操作的访问路径</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//设置当前操作的返回值类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestParam</span> <span class="comment">//绑定请求参数与形参之间的关系 作为参数</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span> &#123; <span class="comment">//spring根据你的形参自动new出对象，然后set值进去，由于list是接口，所以没有构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;likes===&gt;&quot;</span>+likes);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;hello&#x27;:&#x27;world&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestBody</span> <span class="comment">//主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern=&quot;&quot;)</span> <span class="comment">//设定日期时间型数据格式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//声明当前类作为异常处理器类</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span> <span class="comment">//设置指定异常的处理方案，功能等同于控制器方法，出现异常后终止原始控制器执行，并转入当前方法执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
